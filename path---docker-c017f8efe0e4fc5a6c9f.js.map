{"version":3,"sources":["webpack:///path---docker-c017f8efe0e4fc5a6c9f.js","webpack:///./.cache/json/docker.json"],"names":["webpackJsonp","366","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,k5DAAAC,aAAk7DC,MAAA,iBAAAC,KAAA,iBAAAC,KAAA,UAAAC,MAAA,+BAAAC,QAAA,yBAA2IC,aAAgBC,MAAQR,KAAA,qMAAAS,GAAA,2GAAAR,aAA6UE,KAAA,2BAAAC,KAAA,SAAAF,MAAA,QAAAI,QAAA,yBAAAD,MAAA,6BAAyIK,MAASV,KAAA,+BAAAS,GAAA,4GAAAR,aAAsKE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,oBAAAI,QAAA,4DAAAD,MAAA","file":"path---docker-c017f8efe0e4fc5a6c9f.js","sourcesContent":["webpackJsonp([174890689291889],{\n\n/***/ 366:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Create a container with a mongo database and connect to it</h3>\\n<p>Start with displaying all currently running containers:</p>\\n<pre><code class=\\\"language-bash\\\">docker ps\\n</code></pre>\\n<p>Then create locally the container associated with the mongo docker image:</p>\\n<pre><code class=\\\"language-bash\\\">docker run -p 27017:27017 -d mongo\\n</code></pre>\\n<p>Executing another time <code>docker ps</code> results in information on the created container like the following being displayed:</p>\\n<pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\\n2c6a61aba41b        mongo               \\\"docker-entrypoint.s…\\\"   3 minutes ago       Up 3 minutes        0.0.0.0:27017->27017/tcp   clever_dubinsky\\n</code></pre>\\n<p>Connection to the database at url localhost:27017 can be opened using for instance the robo-3t nosql database editor.\\nFinally, the container when not needed anymore can be stopped with:</p>\\n<pre><code>docker stop 2c6a61aba41b\\n</code></pre>\\n<h3>Create a container with a PostgreSQL database given the database name and the user credentials</h3>\\n<p>Let us assume we need to connect to a database called course_data in a PostgreSQL SGBD with the following credentials: the user is postgres and the password is password. The command line to launch a docker container with such a database is:</p>\\n<pre><code class=\\\"language-bash\\\">docker run --name postgresdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=course_data -d -p 5432:5432 postgres\\n</code></pre>\\n<p>Terminal access to the database prompt is obtained by first accessing the container shell:</p>\\n<pre><code class=\\\"language-bash\\\">docker container exec -it postgresdb bash\\n</code></pre>\\n<p>The postgre prompt of user 'postgres' may then be accessed with:</p>\\n<pre><code class=\\\"language-bash\\\">psql course_data postgres\\n</code></pre>\",\"frontmatter\":{\"title\":\"Docker Recipes\",\"date\":\"March 31, 2020\",\"path\":\"/docker\",\"tags\":[\"docker\",\"container\",\"devops\"],\"excerpt\":\"Some Docker Recipes\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>General documentation</h3>\\n<h3>Bootstrap</h3>\\n<p><a href=\\\"https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/\\\">How to Add Bootstrap to an Angular CLI project</a></p>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2019-03-05-styling/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2019-03-05T22:35:12.235Z\",\"path\":\"/style\",\"title\":\"Style\",\"excerpt\":\"Documentation on style\",\"tags\":[\"style\",\"css\",\"bootstrap\"]}},\"next\":{\"html\":\"<h3>Installing Jhipster</h3>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Jhipster commands\",\"excerpt\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"tags\":[\"jhipster\",\"aws\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docker-c017f8efe0e4fc5a6c9f.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Create a container with a mongo database and connect to it</h3>\\n<p>Start with displaying all currently running containers:</p>\\n<pre><code class=\\\"language-bash\\\">docker ps\\n</code></pre>\\n<p>Then create locally the container associated with the mongo docker image:</p>\\n<pre><code class=\\\"language-bash\\\">docker run -p 27017:27017 -d mongo\\n</code></pre>\\n<p>Executing another time <code>docker ps</code> results in information on the created container like the following being displayed:</p>\\n<pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\\n2c6a61aba41b        mongo               \\\"docker-entrypoint.s…\\\"   3 minutes ago       Up 3 minutes        0.0.0.0:27017->27017/tcp   clever_dubinsky\\n</code></pre>\\n<p>Connection to the database at url localhost:27017 can be opened using for instance the robo-3t nosql database editor.\\nFinally, the container when not needed anymore can be stopped with:</p>\\n<pre><code>docker stop 2c6a61aba41b\\n</code></pre>\\n<h3>Create a container with a PostgreSQL database given the database name and the user credentials</h3>\\n<p>Let us assume we need to connect to a database called course_data in a PostgreSQL SGBD with the following credentials: the user is postgres and the password is password. The command line to launch a docker container with such a database is:</p>\\n<pre><code class=\\\"language-bash\\\">docker run --name postgresdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=course_data -d -p 5432:5432 postgres\\n</code></pre>\\n<p>Terminal access to the database prompt is obtained by first accessing the container shell:</p>\\n<pre><code class=\\\"language-bash\\\">docker container exec -it postgresdb bash\\n</code></pre>\\n<p>The postgre prompt of user 'postgres' may then be accessed with:</p>\\n<pre><code class=\\\"language-bash\\\">psql course_data postgres\\n</code></pre>\",\"frontmatter\":{\"title\":\"Docker Recipes\",\"date\":\"March 31, 2020\",\"path\":\"/docker\",\"tags\":[\"docker\",\"container\",\"devops\"],\"excerpt\":\"Some Docker Recipes\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>General documentation</h3>\\n<h3>Bootstrap</h3>\\n<p><a href=\\\"https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/\\\">How to Add Bootstrap to an Angular CLI project</a></p>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2019-03-05-styling/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2019-03-05T22:35:12.235Z\",\"path\":\"/style\",\"title\":\"Style\",\"excerpt\":\"Documentation on style\",\"tags\":[\"style\",\"css\",\"bootstrap\"]}},\"next\":{\"html\":\"<h3>Installing Jhipster</h3>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Jhipster commands\",\"excerpt\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"tags\":[\"jhipster\",\"aws\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docker.json\n// module id = 366\n// module chunks = 174890689291889"],"sourceRoot":""}
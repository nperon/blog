{"version":3,"sources":["webpack:///path---memoization-9c3a1a3a17a0e2bdc186.js","webpack:///./.cache/json/memoization.json"],"names":["webpackJsonp","321","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mmCAA+lCC,aAAgCC,MAAA,8BAAAC,KAAA,gBAAAC,KAAA,eAAAC,MAAA,2DAAAC,QAAA,4HAA2RC,aAAgBC,MAAQR,KAAA,sfAAAS,GAAA,yGAAAR,aAAsoBE,KAAA,2BAAAC,KAAA,aAAAF,MAAA,YAAAI,QAAA,iBAAAD,MAAA,sBAAkIK,MAASV,KAAA,maAAAS,GAAA,wGAAAR,aAAwiBE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,WAAAI,QAAA,WAAAD,MAAA","file":"path---memoization-9c3a1a3a17a0e2bdc186.js","sourcesContent":["webpackJsonp([1543267897192],{\n\n/***/ 321:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let n = args[0];\\n    if (n in cache) {\\n      return cache[n];\\n    }\\n    else {\\n      let result = fn(n);\\n      cache[n] = result;\\n      return result;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>This memoize function can be\\nused for instance in calculating Fibonacci\\nseries as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">const memoizeFib = memoize(fib);\\n\\nfunction fib(num) {\\n  switch (num) {\\n    case 0: {\\n      return 0;\\n    }\\n    case 1: {\\n      return 1;\\n    }\\n    default: {\\n      return memoizeFib(num-2)+memoizeFib(num-1); \\n    }\\n  }\\n}\\n</code></pre>\\n<p>In the following slightly different version of memoize,\\narguments of the function, which operate as the cache keys,\\nare stringified: </p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let stringifiedArgs = JSON.stringify(args);\\n    let result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn(...args);\\n    return result;\\n  }\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"Memoizing a function in es6\",\"date\":\"July 21, 2018\",\"path\":\"/memoization\",\"tags\":[\"javascript\",\"es6\",\"functional programming\",\"memoization\"],\"excerpt\":\"Function memoization implemented in a short snippet with some convenient functional programming features of javascript\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p><a href=\\\"https://www.codewars.com/dashboard\\\">Codewars</a></p>\\n<p><a href=\\\"https://gpcchs.slack.com/threads/\\\">Slack</a></p>\\n<p><a href=\\\"https://jestjs.io/docs/en/asynchronous.html\\\">Jest asynchronous</a></p>\\n<p><a href=\\\"https://www.datchley.name/es6-promises/\\\">ES6 Promises</a></p>\\n<p><a href=\\\"https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9\\\">ES6 Async/Await</a></p>\\n<p><a href=\\\"https://javascript.info/regexp-introduction\\\">regexp</a></p>\",\"id\":\"/home/nperon/Documents/blog/src/pages/2018-07-23-bookmarks/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-07-23T21:34:19.235Z\",\"path\":\"/bookmarks\",\"title\":\"Bookmarks\",\"excerpt\":\"Some bookmarks\",\"tags\":[\"bookmarks\",\"blog\"]}},\"next\":{\"html\":\"<p><em>This text will be italic</em>\\n<em>This will also be italic</em></p>\\n<p><strong>This text will be bold</strong>\\n<strong>This will also be bold</strong></p>\\n<p><em>You <strong>can</strong> combine them</em></p>\\n<h1>This is a possible title</h1>\\n<p>...and more documentation provided by Github at\\n<a href=\\\"https://guides.github.com/features/mastering-markdown/#what\\\">Mastering markdown Github page</a></p>\",\"id\":\"/home/nperon/Documents/blog/src/pages/2018-07-20-markdown/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-20T14:24:43.180Z\",\"path\":\"/markdown\",\"title\":\"Markdown\",\"excerpt\":\"Markdown\",\"tags\":[\"markdown\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---memoization-9c3a1a3a17a0e2bdc186.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let n = args[0];\\n    if (n in cache) {\\n      return cache[n];\\n    }\\n    else {\\n      let result = fn(n);\\n      cache[n] = result;\\n      return result;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>This memoize function can be\\nused for instance in calculating Fibonacci\\nseries as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">const memoizeFib = memoize(fib);\\n\\nfunction fib(num) {\\n  switch (num) {\\n    case 0: {\\n      return 0;\\n    }\\n    case 1: {\\n      return 1;\\n    }\\n    default: {\\n      return memoizeFib(num-2)+memoizeFib(num-1); \\n    }\\n  }\\n}\\n</code></pre>\\n<p>In the following slightly different version of memoize,\\narguments of the function, which operate as the cache keys,\\nare stringified: </p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let stringifiedArgs = JSON.stringify(args);\\n    let result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn(...args);\\n    return result;\\n  }\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"Memoizing a function in es6\",\"date\":\"July 21, 2018\",\"path\":\"/memoization\",\"tags\":[\"javascript\",\"es6\",\"functional programming\",\"memoization\"],\"excerpt\":\"Function memoization implemented in a short snippet with some convenient functional programming features of javascript\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p><a href=\\\"https://www.codewars.com/dashboard\\\">Codewars</a></p>\\n<p><a href=\\\"https://gpcchs.slack.com/threads/\\\">Slack</a></p>\\n<p><a href=\\\"https://jestjs.io/docs/en/asynchronous.html\\\">Jest asynchronous</a></p>\\n<p><a href=\\\"https://www.datchley.name/es6-promises/\\\">ES6 Promises</a></p>\\n<p><a href=\\\"https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9\\\">ES6 Async/Await</a></p>\\n<p><a href=\\\"https://javascript.info/regexp-introduction\\\">regexp</a></p>\",\"id\":\"/home/nperon/Documents/blog/src/pages/2018-07-23-bookmarks/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-07-23T21:34:19.235Z\",\"path\":\"/bookmarks\",\"title\":\"Bookmarks\",\"excerpt\":\"Some bookmarks\",\"tags\":[\"bookmarks\",\"blog\"]}},\"next\":{\"html\":\"<p><em>This text will be italic</em>\\n<em>This will also be italic</em></p>\\n<p><strong>This text will be bold</strong>\\n<strong>This will also be bold</strong></p>\\n<p><em>You <strong>can</strong> combine them</em></p>\\n<h1>This is a possible title</h1>\\n<p>...and more documentation provided by Github at\\n<a href=\\\"https://guides.github.com/features/mastering-markdown/#what\\\">Mastering markdown Github page</a></p>\",\"id\":\"/home/nperon/Documents/blog/src/pages/2018-07-20-markdown/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-20T14:24:43.180Z\",\"path\":\"/markdown\",\"title\":\"Markdown\",\"excerpt\":\"Markdown\",\"tags\":[\"markdown\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/memoization.json\n// module id = 321\n// module chunks = 1543267897192"],"sourceRoot":""}
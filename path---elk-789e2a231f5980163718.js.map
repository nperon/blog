{"version":3,"sources":["webpack:///path---elk-789e2a231f5980163718.js","webpack:///./.cache/json/elk.json"],"names":["webpackJsonp","365","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+5DAA8jEC,aAAmCC,MAAA,gDAAAC,KAAA,kBAAAC,KAAA,OAAAC,MAAA,kDAAAC,QAAA,MAAwKC,aAAgBC,MAAQR,KAAA,itGAA20CS,GAAA,4GAAAR,aAAqhEE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,4DAAAI,QAAA,GAAAD,MAAA,oBAAiKK,KAAA","file":"path---elk-789e2a231f5980163718.js","sourcesContent":["webpackJsonp([256481480159200],{\n\n/***/ 365:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Starting</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/_cat/indices\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">curl -XDELETE 127.0.0.1:9200/movies\\n</code></pre>\\n<h3>Create an index called movies with a mapping</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPUT 127.0.0.1:9200/movies -d '\\n{\\n    \\\"mappings\\\": {\\n        \\\"properties\\\": {\\n            \\\"year\\\": {\\n                \\\"type\\\": \\\"date\\\"\\n            }\\n        }\\n    }\\n}'\\n</code></pre>\\n<h3>Import a document into our movies index</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/movies/_mapping\\n</code></pre>\\n<h3>Post a new document into our movies index</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPOST 127.0.0.1:9200/movies/_doc/109487 -d '\\n{\\n    \\\"genre\\\" : [\\\"IMAX\\\", \\\"Sci-Fi\\\"],\\n    \\\"title\\\": \\\"Interstellar\\\",\\n    \\\"year\\\": 2014\\n}'\\n</code></pre>\\n<h3>Perform search</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/movies/_search?pretty\\n</code></pre>\\n<h3>Insert a bunch of movies</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPUT 127.0.0.1:9200/_bulk -d '\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"135569\\\" } }\\n{ \\\"id\\\": \\\"135569\\\", \\\"title\\\" : \\\"Star Trek Beyond\\\", \\\"year\\\":2016 , \\\"genre\\\":[\\\"Action\\\", \\\"Adventure\\\", \\\"Sci-Fi\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"122886\\\" } }\\n{ \\\"id\\\": \\\"122886\\\", \\\"title\\\" : \\\"Star Wars: Episode VII - The Force Awakens\\\", \\\"year\\\":2015 , \\\"genre\\\":[\\\"Action\\\", \\\"Adventure\\\", \\\"Fantasy\\\", \\\"Sci-Fi\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"109487\\\" } }\\n{ \\\"id\\\": \\\"109487\\\", \\\"title\\\" : \\\"Interstellar\\\", \\\"year\\\":2014 , \\\"genre\\\":[\\\"Sci-Fi\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"58559\\\" } }\\n{ \\\"id\\\": \\\"58559\\\", \\\"title\\\" : \\\"Dark Knight, The\\\", \\\"year\\\":2008 , \\\"genre\\\":[\\\"Action\\\", \\\"Crime\\\", \\\"Drama\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"1924\\\" } }\\n{ \\\"id\\\": \\\"1924\\\", \\\"title\\\" : \\\"Plan 9 from Outer Space\\\", \\\"year\\\":1959 , \\\"genre\\\":[\\\"Horror\\\", \\\"Sci-Fi\\\"] }\\n'\\n</code></pre>\",\"frontmatter\":{\"title\":\"Mapping and Indexing Data into Elastic Search\",\"date\":\"August 28, 2020\",\"path\":\"/elk\",\"tags\":[\"Elastic Search\",\"Logstash\",\"mapping\",\"indexing\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>Installing Jhipster</h3>\\n<pre><code>npm install -g generator-jhipster\\n</code></pre>\\n<pre><code>jhipster --version\\n</code></pre>\\n<h3>Generating an app</h3>\\n<pre><code>mkdir myPOC &#x26;&#x26; cd myPOC\\n</code></pre>\\n<pre><code>jhipster\\n</code></pre>\\n<pre><code>code .\\n</code></pre>\\n<pre><code>npm install\\n</code></pre>\\n<p>Hints on available spring boot options can be displayed with:</p>\\n<pre><code>mvn spring-boot:help\\n</code></pre>\\n<p>The application can be started with the dev profile with: </p>\\n<pre><code>mvn spring-boot:build-info\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code>mvn spring-boot:run\\n</code></pre>\\n<p>As an alternative to all of the mvn spring-boot commands above, the user may just run the mvnw available in the application root:</p>\\n<pre><code>./mvnw\\n</code></pre>\\n<pre><code>npm start\\n</code></pre>\\n<p>To generate entities according to the application requirements, open a text editor like gedit and code a jdl language snipet with a <code>.jh</code> extension describing the different entities and their relationships:</p>\\n<pre><code>gedit src/main/resources/entities.jh &#x26;\\n</code></pre>\\n<p>Sample jh files with entities are available for instance in the <a href=\\\"https://github.com/jhipster/jdl-samples\\\">jdl-samples jhipster project on github</a>. Skip the <code>application { ... }</code> statement in your snippet as your application options are already set and you only want to describe your entities at this stage. Once your <code>entities.jh</code> file is ready, go ahead and generate the entities with:</p>\\n<pre><code>jhipster import-jdl src/main/resources/entities.jh\\n</code></pre>\\n<p>To package the application as a “production” JAR in the target directory, type:</p>\\n<pre><code>./mvnw -Pprod clean verify\\n</code></pre>\\n<h3>Leveraging docker according to the selected Jhipster options</h3>\\n<p>A number of possible options in using Jhipster are described in the README.md file of the project folder.</p>\\n<p>In case the JHipster Registry option was selected, the registry app can be run from the Docker image available in the application src/main/docker directory with: </p>\\n<pre><code>docker-compose -f src/main/docker/jhipster-registry.yml up\\n</code></pre>\\n<p>If you chose OAuth 2.0 as your authentication, Keycloak is used as the default identity provider. Running </p>\\n<pre><code>docker-compose -f src/main/docker/keycloak.yml up\\n</code></pre>\\n<p>starts up Keycloak automatically. A number of other docker-compose scripts can be availabla in the <code>src/main/docker/</code> directory, depending on the options set initially while generating the app. For instance it could well be that a <code>mysql.yml</code> docker-compose script is available to run a container with a mysql database required in dev mode. All of these docker-compose scripts can be run following the same <code>docker-compose</code> command pattern as stated above.</p>\\n<h3>Jhipster Marketplace modules of interest</h3>\\n<p>Kafka</p>\\n<p>Stripe Payment </p>\\n<p>Paypal</p>\\n<p>Blockchain</p>\\n<h3>Links</h3>\\n<p><a href=\\\"https://www.jhipster.tech/\\\">JHipster Homepage</a></p>\\n<p><a href=\\\"https://start.jhipster.tech/jdl-studio/\\\">JDL Studio</a></p>\\n<p><a href=\\\"https://github.com/jhipster\\\">JHipster github page</a></p>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"excerpt\":\"\",\"tags\":[\"jhipster\",\"aws\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---elk-789e2a231f5980163718.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Starting</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/_cat/indices\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">curl -XDELETE 127.0.0.1:9200/movies\\n</code></pre>\\n<h3>Create an index called movies with a mapping</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPUT 127.0.0.1:9200/movies -d '\\n{\\n    \\\"mappings\\\": {\\n        \\\"properties\\\": {\\n            \\\"year\\\": {\\n                \\\"type\\\": \\\"date\\\"\\n            }\\n        }\\n    }\\n}'\\n</code></pre>\\n<h3>Import a document into our movies index</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/movies/_mapping\\n</code></pre>\\n<h3>Post a new document into our movies index</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPOST 127.0.0.1:9200/movies/_doc/109487 -d '\\n{\\n    \\\"genre\\\" : [\\\"IMAX\\\", \\\"Sci-Fi\\\"],\\n    \\\"title\\\": \\\"Interstellar\\\",\\n    \\\"year\\\": 2014\\n}'\\n</code></pre>\\n<h3>Perform search</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XGET 127.0.0.1:9200/movies/_search?pretty\\n</code></pre>\\n<h3>Insert a bunch of movies</h3>\\n<pre><code class=\\\"language-bash\\\">curl -XPUT 127.0.0.1:9200/_bulk -d '\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"135569\\\" } }\\n{ \\\"id\\\": \\\"135569\\\", \\\"title\\\" : \\\"Star Trek Beyond\\\", \\\"year\\\":2016 , \\\"genre\\\":[\\\"Action\\\", \\\"Adventure\\\", \\\"Sci-Fi\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"122886\\\" } }\\n{ \\\"id\\\": \\\"122886\\\", \\\"title\\\" : \\\"Star Wars: Episode VII - The Force Awakens\\\", \\\"year\\\":2015 , \\\"genre\\\":[\\\"Action\\\", \\\"Adventure\\\", \\\"Fantasy\\\", \\\"Sci-Fi\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"109487\\\" } }\\n{ \\\"id\\\": \\\"109487\\\", \\\"title\\\" : \\\"Interstellar\\\", \\\"year\\\":2014 , \\\"genre\\\":[\\\"Sci-Fi\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"58559\\\" } }\\n{ \\\"id\\\": \\\"58559\\\", \\\"title\\\" : \\\"Dark Knight, The\\\", \\\"year\\\":2008 , \\\"genre\\\":[\\\"Action\\\", \\\"Crime\\\", \\\"Drama\\\", \\\"IMAX\\\"] }\\n{ \\\"create\\\" : { \\\"_index\\\" : \\\"movies\\\", \\\"_id\\\" : \\\"1924\\\" } }\\n{ \\\"id\\\": \\\"1924\\\", \\\"title\\\" : \\\"Plan 9 from Outer Space\\\", \\\"year\\\":1959 , \\\"genre\\\":[\\\"Horror\\\", \\\"Sci-Fi\\\"] }\\n'\\n</code></pre>\",\"frontmatter\":{\"title\":\"Mapping and Indexing Data into Elastic Search\",\"date\":\"August 28, 2020\",\"path\":\"/elk\",\"tags\":[\"Elastic Search\",\"Logstash\",\"mapping\",\"indexing\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>Installing Jhipster</h3>\\n<pre><code>npm install -g generator-jhipster\\n</code></pre>\\n<pre><code>jhipster --version\\n</code></pre>\\n<h3>Generating an app</h3>\\n<pre><code>mkdir myPOC &#x26;&#x26; cd myPOC\\n</code></pre>\\n<pre><code>jhipster\\n</code></pre>\\n<pre><code>code .\\n</code></pre>\\n<pre><code>npm install\\n</code></pre>\\n<p>Hints on available spring boot options can be displayed with:</p>\\n<pre><code>mvn spring-boot:help\\n</code></pre>\\n<p>The application can be started with the dev profile with: </p>\\n<pre><code>mvn spring-boot:build-info\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code>mvn spring-boot:run\\n</code></pre>\\n<p>As an alternative to all of the mvn spring-boot commands above, the user may just run the mvnw available in the application root:</p>\\n<pre><code>./mvnw\\n</code></pre>\\n<pre><code>npm start\\n</code></pre>\\n<p>To generate entities according to the application requirements, open a text editor like gedit and code a jdl language snipet with a <code>.jh</code> extension describing the different entities and their relationships:</p>\\n<pre><code>gedit src/main/resources/entities.jh &#x26;\\n</code></pre>\\n<p>Sample jh files with entities are available for instance in the <a href=\\\"https://github.com/jhipster/jdl-samples\\\">jdl-samples jhipster project on github</a>. Skip the <code>application { ... }</code> statement in your snippet as your application options are already set and you only want to describe your entities at this stage. Once your <code>entities.jh</code> file is ready, go ahead and generate the entities with:</p>\\n<pre><code>jhipster import-jdl src/main/resources/entities.jh\\n</code></pre>\\n<p>To package the application as a “production” JAR in the target directory, type:</p>\\n<pre><code>./mvnw -Pprod clean verify\\n</code></pre>\\n<h3>Leveraging docker according to the selected Jhipster options</h3>\\n<p>A number of possible options in using Jhipster are described in the README.md file of the project folder.</p>\\n<p>In case the JHipster Registry option was selected, the registry app can be run from the Docker image available in the application src/main/docker directory with: </p>\\n<pre><code>docker-compose -f src/main/docker/jhipster-registry.yml up\\n</code></pre>\\n<p>If you chose OAuth 2.0 as your authentication, Keycloak is used as the default identity provider. Running </p>\\n<pre><code>docker-compose -f src/main/docker/keycloak.yml up\\n</code></pre>\\n<p>starts up Keycloak automatically. A number of other docker-compose scripts can be availabla in the <code>src/main/docker/</code> directory, depending on the options set initially while generating the app. For instance it could well be that a <code>mysql.yml</code> docker-compose script is available to run a container with a mysql database required in dev mode. All of these docker-compose scripts can be run following the same <code>docker-compose</code> command pattern as stated above.</p>\\n<h3>Jhipster Marketplace modules of interest</h3>\\n<p>Kafka</p>\\n<p>Stripe Payment </p>\\n<p>Paypal</p>\\n<p>Blockchain</p>\\n<h3>Links</h3>\\n<p><a href=\\\"https://www.jhipster.tech/\\\">JHipster Homepage</a></p>\\n<p><a href=\\\"https://start.jhipster.tech/jdl-studio/\\\">JDL Studio</a></p>\\n<p><a href=\\\"https://github.com/jhipster\\\">JHipster github page</a></p>\",\"id\":\"/home/nperon/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"excerpt\":\"\",\"tags\":[\"jhipster\",\"aws\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/elk.json\n// module id = 365\n// module chunks = 256481480159200"],"sourceRoot":""}